---
import BodyText from "./BodyText.astro";
import HeadingFlanked from "./HeadingFlanked.astro";

interface Props {
	class?: string;
}

const { class: className, ...rest } = Astro.props;
---

<div>
	<HeadingFlanked id="newsletter">Newsletter</HeadingFlanked>

	<form
		{...rest}
		class:list={["newsletter", className]}
		action="https://app.loops.so/api/newsletter-form/clwpkthom0067d11n8jbrxb3b"
		id="newsletter-form"
		method="POST"
	>
		<label for="email">
			Enter your email for deadlines, announcements, and other great
			SquiggleConf news.
		</label>
		<input
			id="email"
			name="email"
			type="email"
			placeholder="you.are@awesome.com"
		/>
		<button class="button" type="submit">Subscribe</button>
	</form>

	<BodyText aria-live="assertive" id="newsletter-message" />
</div>

<script>
	const form = document.getElementById("newsletter-form") as HTMLFormElement;

	function setMessage(text: string, status: "happy" | "unhappy") {
		const messageDiv = document.getElementById(
			"newsletter-message",
		) as HTMLDivElement;

		messageDiv.textContent = text;

		if (status === "unhappy") {
			messageDiv.classList.add("unhappy");
		} else {
			messageDiv.classList.remove("unhappy");
		}
	}

	form.addEventListener("submit", (event) => {
		event.preventDefault();

		const submitButton = form.querySelector("button") as HTMLButtonElement;
		submitButton.disabled = true;

		const emailInput = form.querySelector("input") as HTMLInputElement;
		const email = emailInput.value;

		const formBody = "userGroup=&email=" + encodeURIComponent(email);
		fetch(form.action, {
			method: "POST",
			body: formBody,
			headers: {
				"Content-Type": "application/x-www-form-urlencoded",
			},
		})
			.then((response) => [response.ok, response.json(), response] as const)
			.then(([ok, dataPromise, response]) => {
				dataPromise.then((data) => {
					if (ok) {
						setMessage("Thanks for signing up!", "happy");
						form.reset();
						return;
					}

					setMessage(
						`There was an issue: ${data || response.statusText}`,
						"unhappy",
					);
				});
			})
			.catch((error) => {
				setMessage(
					error.message === "Failed to fetch"
						? "Too many requests. Try again later, please?"
						: error.message,
					"unhappy",
				);
			})
			.finally(() => {
				submitButton.disabled = false;
			});
	});
</script>

<style>
	.newsletter {
		display: flex;
		flex-direction: column;
		font-family: var(--fontFamilyBody);
		font-size: var(--fontSizeBody);
		font-weight: var(--fontWeightBody);
		gap: 1rem;
		padding: 0 var(--widthBodyPadding);
		text-align: center;
	}

	label {
		grid-area: 1 / 1 / 2 / 2;
	}

	.button {
		cursor: pointer;
		color: var(--colorOffWhite);
		grid-area: 1 / 2 / 2 / 3;
		transition:
			var(--transitionFast) transform,
			var(--transitionFast) box-shadow;
	}

	.button:focus:not(:disabled),
	.button:hover:not(:disabled) {
		transform: translateY(-3px);
		box-shadow: 0 6px 14px var(--colorTextShadow);
	}

	.button[disabled] {
		opacity: 0.5;
		cursor: wait;
	}

	input {
		grid-area: 2 / 1 / 3 / 3;
	}

	label {
		max-width: 20rem;
	}

	button {
		background: var(--colorEmphasized);
		border-radius: 1rem;
		border: none;
		font-family: var(--fontFamilyHeading);
		font-weight: 700;
		font-size: var(--fontSizeBodyLarge);
		text-decoration: none;
		color: var(--colorInverted);
		padding: 1rem 2rem;
	}

	input {
		border: 1px solid var(--colorForeground);
		border-radius: 0.5rem;
		padding: 0.5rem 0.75rem;
	}

	input::placeholder {
		color: var(--colorForeground);
	}

	#newsletter-message {
		margin: 1rem auto 0;
		text-align: center;
	}

	#newsletter-message.unhappy {
		color: var(--colorUnhappy);
	}

	@media (min-width: 700px) {
		.newsletter {
			align-items: center;
			display: grid;
			grid-column-gap: 1rem;
			grid-row-gap: 1rem;
			grid-template-columns: repeat(2, auto);
			grid-template-rows: repeat(2, auto);
		}
	}
</style>
